import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import API from '../../services/api';
import { 
  ArrowLeft, 
  Activity,
  AlertCircle,
  CheckCircle,
  User,
  FileText,
  UserCheck,
  MapPin,
  Phone,
  Stethoscope,
  TestTube,
  Save,
  Upload,
  Download,
  Send,
  Eye
} from 'lucide-react';

const GenerateReport = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { user } = useSelector((state) => state.auth);
  
  const [testRequest, setTestRequest] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  
  // Form state
  const [formData, setFormData] = useState({
    reportSummary: '',
    clinicalInterpretation: '',
    qualityControl: '',
    methodUsed: '',
    equipmentUsed: ''
  });

  useEffect(() => {
    if (id) {
      fetchTestRequestDetails();
    }
  }, [id]);

  const fetchTestRequestDetails = async () => {
    try {
      setLoading(true);
      const response = await API.get(`/test-requests/${id}`);
      setTestRequest(response.data);
      
      // Pre-fill form with existing data if available
      if (response.data.reportSummary) {
        setFormData(prev => ({
          ...prev,
          reportSummary: response.data.reportSummary || '',
          clinicalInterpretation: response.data.clinicalInterpretation || '',
          qualityControl: response.data.qualityControl || '',
          methodUsed: response.data.methodUsed || '',
          equipmentUsed: response.data.equipmentUsed || ''
        }));
      }
    } catch (error) {
      console.error('Error fetching test request details:', error);
      setError('Failed to load test request details');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      setSaving(true);
      setError(null);
      
      // Send the form data to generate PDF report
      const requestData = {
        reportSummary: formData.reportSummary,
        clinicalInterpretation: formData.clinicalInterpretation,
        qualityControl: formData.qualityControl,
        methodUsed: formData.methodUsed,
        equipmentUsed: formData.equipmentUsed
      };

      const response = await API.put(`/test-requests/${id}/generate-report`, requestData);
      
      setSuccess(true);
      setTimeout(() => {
        navigate(`/dashboard/lab/test-request/${id}`);
      }, 2000);
      
    } catch (error) {
      console.error('Error generating report:', error);
      setError(error.response?.data?.message || 'Failed to generate report');
    } finally {
      setSaving(false);
    }
  };

  const handlePreviewReport = async () => {
    try {
      // Generate a preview of what the report will look like
      const reportData = {
        testRequestId: testRequest._id,
        patientName: testRequest.patientName,
        testType: testRequest.testType,
        testResults: testRequest.testResults,
        conclusion: testRequest.conclusion,
        recommendations: testRequest.recommendations,
        reportSummary: formData.reportSummary,
        clinicalInterpretation: formData.clinicalInterpretation,
        generatedBy: user?.staffName || user?.name,
        generatedDate: new Date().toISOString()
      };

      // Create a preview text
      const previewContent = `
LABORATORY TEST REPORT PREVIEW

Test Request ID: ${testRequest._id}
Patient Name: ${testRequest.patientName}
Test Type: ${testRequest.testType}
Date: ${new Date().toLocaleDateString()}

TEST RESULTS:
${testRequest.testResults || 'N/A'}

CONCLUSION:
${testRequest.conclusion || 'N/A'}

RECOMMENDATIONS:
${testRequest.recommendations || 'N/A'}

REPORT SUMMARY:
${formData.reportSummary || 'N/A'}

CLINICAL INTERPRETATION:
${formData.clinicalInterpretation || 'N/A'}

METHOD USED:
${formData.methodUsed || 'N/A'}

EQUIPMENT USED:
${formData.equipmentUsed || 'N/A'}

QUALITY CONTROL:
${formData.qualityControl || 'N/A'}

Generated by: ${user?.staffName || user?.name}
Generated on: ${new Date().toLocaleString()}
      `;

      // Open preview in new window
      const previewWindow = window.open('', '_blank');
      previewWindow.document.write(`
        <html>
          <head>
            <title>Report Preview</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              h1 { color: #333; text-align: center; }
              pre { white-space: pre-wrap; background: #f5f5f5; padding: 15px; border-radius: 5px; }
            </style>
          </head>
          <body>
            <h1>Test Report Preview</h1>
            <pre>${previewContent}</pre>
          </body>
        </html>
      `);
      previewWindow.document.close();
    } catch (error) {
      console.error('Error generating preview:', error);
      setError('Failed to generate preview');
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'Pending':
        return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'Assigned':
        return 'text-blue-600 bg-blue-50 border-blue-200';
      case 'Sample_Collection_Scheduled':
        return 'text-purple-600 bg-purple-50 border-purple-200';
      case 'Sample_Collected':
        return 'text-indigo-600 bg-indigo-50 border-indigo-200';
      case 'In_Lab_Testing':
        return 'text-orange-600 bg-orange-50 border-orange-200';
      case 'Testing_Completed':
        return 'text-teal-600 bg-teal-50 border-teal-200';
      case 'Report_Generated':
        return 'text-cyan-600 bg-cyan-50 border-cyan-200';
      case 'Report_Sent':
        return 'text-emerald-600 bg-emerald-50 border-emerald-200';
      case 'Completed':
        return 'text-green-600 bg-green-50 border-green-200';
      case 'Cancelled':
        return 'text-red-600 bg-red-50 border-red-200';
      default:
        return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <div className="animate-pulse space-y-4">
              <div className="h-8 bg-gray-200 rounded w-1/3"></div>
              <div className="h-4 bg-gray-200 rounded w-1/2"></div>
              <div className="space-y-3">
                <div className="h-4 bg-gray-200 rounded"></div>
                <div className="h-4 bg-gray-200 rounded w-5/6"></div>
                <div className="h-4 bg-gray-200 rounded w-4/6"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error && !testRequest) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <div className="text-center">
              <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
              <h2 className="text-lg font-semibold text-gray-800 mb-2">Error Loading Test Request</h2>
              <p className="text-gray-600 mb-4">{error}</p>
              <button
                onClick={() => navigate('/dashboard/lab/test-requests')}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Back to Test Requests
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!testRequest) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <div className="text-center">
              <Activity className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h2 className="text-lg font-semibold text-gray-800 mb-2">No Test Request Found</h2>
              <p className="text-gray-600 mb-4">The requested test request could not be found.</p>
              <button
                onClick={() => navigate('/dashboard/lab/test-requests')}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Back to Test Requests
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-5xl mx-auto p-6">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => navigate(`/dashboard/lab/test-request/${id}`)}
                className="flex items-center space-x-2 text-blue-600 hover:text-blue-700 transition-colors"
              >
                <ArrowLeft size={20} />
                <span>Back</span>
              </button>
              <h1 className="text-xl font-bold text-gray-800">Generate Test Report</h1>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="bg-white rounded-lg shadow-lg p-8">
          {/* Record Header */}
          <div className="text-center mb-8">
            <h1 className="text-xl font-bold text-gray-800 mb-2">GENERATE TEST REPORT</h1>
            <p className="text-gray-600">Create Laboratory Test Report (PDF)</p>
          </div>

          {/* Success Message */}
          {success && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
              <div className="flex items-center">
                <CheckCircle className="h-5 w-5 text-green-500 mr-2" />
                <p className="text-green-800">
                  Report generated successfully! Redirecting to test request details...
                </p>
              </div>
            </div>
          )}

          {/* Error Message */}
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
              <div className="flex items-center">
                <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
                <p className="text-red-800">{error}</p>
              </div>
            </div>
          )}
          
          {/* Test Request Information */}
          <div className="bg-blue-50 rounded-lg p-6 mb-8">
            <h2 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
              <UserCheck className="h-5 w-5 mr-2 text-blue-600" />
              Test Request Information
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-xs font-medium text-gray-500">Request ID</label>
                <p className="text-gray-900 font-medium">{testRequest._id || 'N/A'}</p>
              </div>
              <div>
                <label className="block text-xs font-medium text-gray-500">Patient Name</label>
                <p className="text-gray-900 font-medium">{testRequest.patientName || testRequest.patientId?.name || 'N/A'}</p>
              </div>
              <div>
                <label className="block text-xs font-medium text-gray-500">Test Type</label>
                <p className="text-gray-900 font-medium">{testRequest.testType || 'N/A'}</p>
              </div>
            </div>
          </div>

          {/* Status and Urgency */}
          <div className="bg-gray-50 rounded-lg p-6 mb-8">
            <h2 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
              <Activity className="h-5 w-5 mr-2 text-blue-600" />
              Current Status & Priority
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-xs font-medium text-gray-500 mb-2">Current Status</label>
                <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(testRequest.status)}`}>
                  {testRequest.status.replace(/_/g, ' ')}
                </span>
              </div>
              <div>
                <label className="block text-xs font-medium text-gray-500 mb-2">Urgency Level</label>
                <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium border ${
                  testRequest.urgency === 'Emergency' ? 'text-red-600 bg-red-50 border-red-200' :
                  testRequest.urgency === 'Urgent' ? 'text-orange-600 bg-orange-50 border-orange-200' :
                  'text-green-600 bg-green-50 border-green-200'
                }`}>
                  {testRequest.urgency}
                </span>
              </div>
            </div>
          </div>

          {/* Test Results Summary */}
          {testRequest.testResults && (
            <div className="bg-gray-50 rounded-lg p-6 mb-8">
              <h2 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                <TestTube className="h-5 w-5 mr-2 text-blue-600" />
                Test Results Summary
              </h2>
              <div className="bg-white rounded-lg p-4 border">
                <p className="text-gray-800 whitespace-pre-wrap">{testRequest.testResults}</p>
              </div>
            </div>
          )}

          {/* Conclusion & Recommendations */}
          {(testRequest.conclusion || testRequest.recommendations) && (
            <div className="bg-gray-50 rounded-lg p-6 mb-8">
              <h2 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                <FileText className="h-5 w-5 mr-2 text-blue-600" />
                Analysis Summary
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {testRequest.conclusion && (
                  <div>
                    <label className="block text-xs font-medium text-gray-500 mb-2">Conclusion</label>
                    <div className="bg-white rounded-lg p-4 border">
                      <p className="text-gray-800 whitespace-pre-wrap">{testRequest.conclusion}</p>
                    </div>
                  </div>
                )}
                {testRequest.recommendations && (
                  <div>
                    <label className="block text-xs font-medium text-gray-500 mb-2">Recommendations</label>
                    <div className="bg-white rounded-lg p-4 border">
                      <p className="text-gray-800 whitespace-pre-wrap">{testRequest.recommendations}</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Generate Report Form */}
          <div className="bg-gray-50 rounded-lg p-6">
            <h2 className="text-lg font-semibold text-gray-800 mb-6 flex items-center">
              <FileText className="h-5 w-5 mr-2 text-blue-600" />
              Generate PDF Test Report
            </h2>
            
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Report Summary */}
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-2">
                  Report Summary <span className="text-red-500">*</span>
                </label>
                <textarea
                  name="reportSummary"
                  value={formData.reportSummary}
                  onChange={handleInputChange}
                  rows={3}
                  required
                  placeholder="Enter a brief summary of the test report..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              {/* Clinical Interpretation */}
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-2">
                  Clinical Interpretation <span className="text-red-500">*</span>
                </label>
                <textarea
                  name="clinicalInterpretation"
                  value={formData.clinicalInterpretation}
                  onChange={handleInputChange}
                  rows={4}
                  required
                  placeholder="Enter clinical interpretation of the results..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              {/* Method Used */}
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-2">
                  Method Used
                </label>
                <input
                  type="text"
                  name="methodUsed"
                  value={formData.methodUsed}
                  onChange={handleInputChange}
                  placeholder="Enter the testing method used..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              {/* Equipment Used */}
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-2">
                  Equipment Used
                </label>
                <input
                  type="text"
                  name="equipmentUsed"
                  value={formData.equipmentUsed}
                  onChange={handleInputChange}
                  placeholder="Enter the equipment used for testing..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              {/* Quality Control */}
              <div>
                <label className="block text-xs font-medium text-gray-700 mb-2">
                  Quality Control Notes
                </label>
                <textarea
                  name="qualityControl"
                  value={formData.qualityControl}
                  onChange={handleInputChange}
                  rows={3}
                  placeholder="Enter quality control information..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              {/* Action Buttons */}
              <div className="flex justify-between gap-3">
                <button
                  type="button"
                  onClick={handlePreviewReport}
                  className="flex items-center px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
                >
                  <Eye className="h-4 w-4 mr-2" />
                  Preview Report
                </button>

                <div className="flex gap-3">
                  <button
                    type="button"
                    onClick={() => navigate(`/dashboard/lab/test-request/${id}`)}
                    className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={saving || !formData.reportSummary || !formData.clinicalInterpretation}
                    className="flex items-center px-6 py-2 bg-cyan-600 text-white rounded-lg hover:bg-cyan-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {saving ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Generating PDF...
                      </>
                    ) : (
                      <>
                        <FileText className="h-4 w-4 mr-2" />
                        Generate PDF Report
                      </>
                    )}
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GenerateReport;